Readme for Developers

There are 4 main files for this VBA add-in:

ThisAddIn.vb - 
the main add-in file every Office VBA addin has. Contains code
handling startup and shutdown of word/new docs, as well as
handles ribbon presses.  Creates SpeechControl toolbars.

SpeechControl.vb -
The main code file. Contains all code relating to the toolbar,
including button presses, highlighting, and speech events.

MyRibbon.vb -
Mostly autogenerated ribbon code enabling Ribbon modification. Small
stub method also handles ribbon button press (Show/Hide button).

MyRibbon.xml -
What will be added to the ribbon (vs default Word Ribbon).


SpeechSynthesizer class:

The TTS function is handled by a Windows .NET Class called
SpeechSynthesizer (inside .NET reference file System.Speech).  
This class is capable of reading a String input aloud.  It ties 
into Windows' built-in TTS functions.  This class also generates
2 speech events which let me track the progress of the TTS speech.  

SpeakProgress - the SpeechSynthesizer is about to speak a new 'word'.
Note: what I call a 'word' is not the same as a word in 
the English language. For example, "tool-bar" would generate 2 
events, while "toolbar" only 1. There are a lot of special 
case 'words' to consider as well, sometimes punctuation is considered
a 'word', usually it is not.
('abc...xyz': the '...' will be considered 3 'words').
Numbers have many special cases as well. Usually a number creates an
exent for each nonzero digit: ie 123056 = 5 events.  However, special
numbers, like dates and phone numbers, will be read differently, and
will generate different amounts of events.  What is and is not a 
'word' is determined by the SpeechSynthesizer itself, I
never found any documentation about this, my code has a bunch
of special case tests I wrote to try to avoid these sorts 
of irregularities. I use this event only for highlighting.

SpeakCompleted - the SpeechSynthesizer has just finished reading the
text it was passed.  I use this event to clear all highlighting, and
reset the toolbar back to an idle state. I also use this event in 
continuous reading to advance to the next text selection and begin a
new TTS reading.

SpeechSynthesizer has 2 methods for speaking text: SpeakAsynch()
and Speak(). I always use the former as it will allow code below
SpeakAsynch() to execute, while Speak() will pause code
execution until the entire TTS text has been read.

SpeechSynthesizer also has methods to modify the read speed and
volume. These modify Windows' global settings for TTS reading.

A lot of my methods will not work properly if there is text currently
being read or paused in the SpeechSynthesizer, so most options on my
toolbar are disabled when TTS is occuring.


General proccess done by code on a Text-to-Speech request by the user:

-Look at what the user wants spoken ("Sentence", "Document", etc).
-Gets a "Range" object corresponding to that area of document.  This 
is always done in a cursor-relative manner.
-Get text inside that Range and pass it to SpeechSynthesizer with
SpeakAsynch(text).  This begins TTS operation.
-Disable toolbar options until TTS stopped.
-On SpeakProgress, update highlighting if desired by user. This
requires lots of testing for special cases mentioned above.
-On SpeakCompleted, reenable toolbar options if TTS done. If
in continuous mode, get next "Range" and repeat until reach end
of document.